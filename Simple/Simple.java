/* Simple.java */
/* Generated By:JavaCC: Do not edit this line. Simple.java */
import java.io.*;
import java.util.ArrayList;

/// DEFINIÇÃO DA ÁRVORE SINTÁTICA:

class SimpleA{
   ArrayList<Comando> comandos;

   SimpleA(ArrayList comandos)
   {this.comandos=comandos;}
}

class Comando{}

class Atrib extends Comando{

   String id;
   Exp exp;

   Atrib (String id, Exp exp)
   {
    this.id=id;
    this.exp=exp;
   }


}


class Print extends Comando{

   Exp exp;
   Print(Exp exp)
   {this.exp = exp;}
}

class Exp{}

class Num extends Exp{
  int num;

  Num(int num)
  {this.num = num;}

}

class Var extends Exp{
  String var;

  Var(String var)
  {this.var=var;}
}


public class Simple implements SimpleConstants {

  /// MAIN PROGRAM

  public static void main(String args[]) throws ParseException,IOException {

      Simple parser = new Simple(new FileInputStream(args[0]));
      SimpleA arvore = parser.Simple();
      System.out.println(gera_java(arvore));


  }

  /// transforma uma árvore sintática da linguagem simple em um programa java:
  public static String gera_java(SimpleA arv)
   {
    String code = "class SimpleProg{\n";
    code = code + "\tpublic static void main(String[] args) {\n" ;
    code = code + gera_java_comandos(arv.comandos);
    code = code + "\t}\n}";
    return code;
   }

  public static String gera_java_comandos(ArrayList<Comando> comandos)
  {
     String code = "";
     for (Comando c : comandos) {
           if (c instanceof Print)
            {
              code = code + "\t\tSystem.out.println(\"\" + " + stringExp(((Print)c).exp ) + ");\n";
            }
            else // SE NÃO É PRINT ENTÃO É UMA ATRIBUIÇÃPO
            {
              code = code + "\t\tint " + ((Atrib)c).id + " = " + stringExp(((Atrib)c).exp) + ";\n";
            }
        }
     return code;
  }

  public static String stringExp(Exp e)
       {
          if (e instanceof Num)
                return (((Num)e).num+"");
          else return (((Var)e).var);

       }

// SIMPLE -> "main" "{" COMANDOS  "}"
  static final public 
SimpleA Simple() throws ParseException {ArrayList comandos= new ArrayList();
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    Comandos(comandos);
    jj_consume_token(FCHAVES);
    jj_consume_token(0);
{if ("" != null) return new SimpleA(comandos);}
    throw new Error("Missing return statement in function");
}

// COMANDOS -> (COM ";")+ 
  static final public 
void Comandos(ArrayList comandos) throws ParseException {Comando c;
    label_1:
    while (true) {
      c = Com();
comandos.add(c);
      jj_consume_token(PV);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
}

// 
// COMANDOS -> COM ";"  COMANDOS'
//
// void Comandos (ArrayList comandos) :
// {Comando c;}
// {
//
// c=Com() {comandos.add(c);} <PV>  ComandosL(comandos)
//
//}

// COMANDOS'->   COM ";" COMANDOS' | epsilon

//void ComandosL (ArrayList comandos) :
//{Comando c;}
//{

// ( c=Com()  {comandos.add(c);} <PV>  ComandosL(comandos))?

//}



// COM -> id ":=" EXP | "print" "(" EXP ")"
  static final public 
Comando Com() throws ParseException {Token id=null; Exp e=null; Comando c=null; Comando result=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = jj_consume_token(ID);
      jj_consume_token(ATRIB);
      e = Exp();
result = new Atrib(id.image,e);
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(APARENTESES);
      e = Exp();
      jj_consume_token(FPARENTESES);
result = new Print(e);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

// EXP -> num | id
  static final public 
Exp Exp() throws ParseException {Token t = null; Exp result=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      t = jj_consume_token(NUM);
result = new Num(Integer.parseInt(t.image));
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
result = new Var(t.image);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x4400,0x4400,0x6000,};
	}

  /** Constructor with InputStream. */
  public Simple(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Simple(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SimpleTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Simple(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SimpleTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SimpleTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Simple(SimpleTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[15];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 3; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 15; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
