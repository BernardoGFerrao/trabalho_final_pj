/* Bela.java */
/* Generated By:JavaCC: Do not edit this line. Bela.java */
import java.io.*;
import java.util.ArrayList;
import ast.*;

public class Bela implements BelaConstants {

    public static void main(String args[]) throws ParseException, IOException {
        FileInputStream fs = new FileInputStream(new File(args[0]));
        Bela parser = new Bela(fs);
        Prog arvore = parser.Bela();
        geraCodigo(arvore, args[0]);
    }

    public static void geraCodigo(Prog prog, String arquivo) {
        System.out.println("Gera\u00e7\u00e3o de c\u00f3digo para o programa: " + arquivo);
    }

  static final public Prog Bela() throws ParseException {Main m;
    ArrayList<Fun> funs = new ArrayList<>();
    Fun f;
    m = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      f = Func();
funs.add(f);
    }
    jj_consume_token(0);
{if ("" != null) return new Prog(m, funs);}
    throw new Error("Missing return statement in function");
}

  static final public Main Main() throws ParseException {ArrayList<VarDecl> vars;
    ArrayList<Comando> coms;
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    coms = SeqComandos();
    jj_consume_token(FCHAVES);
{if ("" != null) return new Main(vars, coms);}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<VarDecl> VarDecl() throws ParseException {ArrayList<VarDecl> vars = new ArrayList<>();
    Token t;
    Token id;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(VAR);
      t = Tipo();
      id = TokenId();
      jj_consume_token(PONTOVIRG);
vars.add(new VarDecl(t.image, id.image));
    }
{if ("" != null) return vars;}
    throw new Error("Missing return statement in function");
}

  static final public Token Tipo() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      t = jj_consume_token(FLOAT);
{if ("" != null) return t;}
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
{if ("" != null) return t;}
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Comando> SeqComandos() throws ParseException {ArrayList<Comando> coms = new ArrayList<>();
    Comando c;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case RETORNO:
      case IMPRESSAO:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      c = Comando();
coms.add(c);
    }
{if ("" != null) return coms;}
    throw new Error("Missing return statement in function");
}

  static final public Comando Comando() throws ParseException {Token id = null;
    Exp exp = null;
    ArrayList<Comando> bloco = null;
    Comando result = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = TokenId();
result = ComandoAux(id);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      exp = Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      bloco = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOVIRG);
result = new CIf(exp, bloco);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      exp = Exp();
      jj_consume_token(ACHAVES);
      bloco = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOVIRG);
result = new CWhile(exp, bloco);
      break;
      }
    case RETORNO:{
      jj_consume_token(RETORNO);
      exp = Exp();
      jj_consume_token(PONTOVIRG);
result = new CReturn(exp);
      break;
      }
    case IMPRESSAO:{
      jj_consume_token(IMPRESSAO);
      exp = Exp();
      jj_consume_token(PONTOVIRG);
result = new CPrint(exp);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  static final public Comando ComandoAux(Token id) throws ParseException {Exp exp = null;
    ArrayList<Exp> args = new ArrayList<>();
    Comando result = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      exp = ComandoAuxIgual();
if (exp instanceof EChamadaFun && ((EChamadaFun)exp).getFun().equals("readInput")) {
                result = new CReadInput(new EVar(id.image));
            } else {
                result = new CAtribuicao(new EVar(id.image), exp);
            }
      break;
      }
    case APAR:{
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APAR:
      case VERDADEIRO:
      case FALSO:
      case NUM:
      case ID:{
        args = ListaExp();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(PONTOVIRG);
result = new CChamadaFun(new EVar(id.image), args);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  static final public Exp ComandoAuxIgual() throws ParseException {Exp exp = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEITURA:{
      jj_consume_token(LEITURA);
      jj_consume_token(APAR);
      jj_consume_token(FPAR);
      jj_consume_token(PONTOVIRG);
{if ("" != null) return new EChamadaFun("readInput", new ArrayList<Exp>());}
      break;
      }
    case APAR:
    case VERDADEIRO:
    case FALSO:
    case NUM:
    case ID:{
      exp = Exp();
      jj_consume_token(PONTOVIRG);
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp Exp() throws ParseException {Exp exp1 = null, exp2 = null;
    Token op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APAR:{
      jj_consume_token(APAR);
      exp1 = Exp();
      op = Op();
      exp2 = Exp();
      jj_consume_token(FPAR);
{if ("" != null) return new EOpExp(op.image, exp1, exp2);}
      break;
      }
    case VERDADEIRO:
    case FALSO:
    case NUM:
    case ID:{
      exp1 = Fator();
{if ("" != null) return exp1;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp Fator() throws ParseException {Token id = null;
    Token num = null;
    ArrayList<Exp> args = new ArrayList<>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = TokenId();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APAR:{
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case APAR:
        case VERDADEIRO:
        case FALSO:
        case NUM:
        case ID:{
          args = ListaExp();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
{if ("" != null) return new EChamadaFun(id.image, args);}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
{if ("" != null) return new EVar(id.image);}
      }
      break;
      }
    case NUM:{
      num = TokenNum();
{if ("" != null) return new EFloat(Float.parseFloat(num.image));}
      break;
      }
    case VERDADEIRO:{
      jj_consume_token(VERDADEIRO);
{if ("" != null) return new ETrue();}
      break;
      }
    case FALSO:{
      jj_consume_token(FALSO);
{if ("" != null) return new EFalse();}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Token Op() throws ParseException {Token op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOMA:{
      op = jj_consume_token(SOMA);
{if ("" != null) return op;}
      break;
      }
    case SUB:{
      op = jj_consume_token(SUB);
{if ("" != null) return op;}
      break;
      }
    case MULT:{
      op = jj_consume_token(MULT);
{if ("" != null) return op;}
      break;
      }
    case DIV:{
      op = jj_consume_token(DIV);
{if ("" != null) return op;}
      break;
      }
    case AND:{
      op = jj_consume_token(AND);
{if ("" != null) return op;}
      break;
      }
    case OR:{
      op = jj_consume_token(OR);
{if ("" != null) return op;}
      break;
      }
    case MENOR:{
      op = jj_consume_token(MENOR);
{if ("" != null) return op;}
      break;
      }
    case MAIOR:{
      op = jj_consume_token(MAIOR);
{if ("" != null) return op;}
      break;
      }
    case DOISIGUAIS:{
      op = jj_consume_token(DOISIGUAIS);
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Exp> ListaExp() throws ParseException {ArrayList<Exp> exps = new ArrayList<>();
    Exp exp;
    exp = Exp();
exps.add(exp);
    ListaExpAux(exps);
{if ("" != null) return exps;}
    throw new Error("Missing return statement in function");
}

  static final public void ListaExpAux(ArrayList<Exp> exps) throws ParseException {Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      exp = Exp();
exps.add(exp);
      ListaExpAux(exps);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

  static final public Fun Func() throws ParseException {Token retType;
    Token funcName;
    ArrayList<ParamFormalFun> params;
    ArrayList<VarDecl> vars;
    ArrayList<Comando> body;
    Fun f;
    jj_consume_token(FUN);
    retType = Tipo();
    funcName = TokenId();
    jj_consume_token(APAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:
    case BOOL:
    case VOID:{
      params = ListaArg();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    body = SeqComandos();
    jj_consume_token(FCHAVES);
{if ("" != null) return new Fun(funcName.image, params, retType.image, vars, body);}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {ArrayList<ParamFormalFun> params = new ArrayList<>();
    Token type;
    Token id;
    type = Tipo();
    id = TokenId();
params.add(new ParamFormalFun(id.image, type.image));
    ListaArgAux(params);
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
}

  static final public void ListaArgAux(ArrayList<ParamFormalFun> params) throws ParseException {Token type;
    Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRGULA:{
      jj_consume_token(VIRGULA);
      type = Tipo();
      id = TokenId();
params.add(new ParamFormalFun(id.image, type.image));
      ListaArgAux(params);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
}

  static final public Token TokenId() throws ParseException {Token t;
    t = jj_consume_token(ID);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public Token TokenNum() throws ParseException {Token t;
    t = jj_consume_token(NUM);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x40,0x7000,0x350000,0x350000,0xc00080,0x8080,0xc80080,0xc00080,0xc00080,0x80,0xc00000,0xff000000,0x0,0x7000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4,0x0,0x0,0x10,0x10,0x18,0x0,0x18,0x18,0x18,0x0,0x18,0x1,0x2,0x0,0x2,};
	}

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BelaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BelaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BelaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[37];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 37; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
