PARSER_BEGIN(Bela)
import java.io.*;
import java.util.ArrayList;
import ast.*;

public class Bela {

    public static void main(String args[]) throws ParseException, IOException {
        FileInputStream fs = new FileInputStream(new File(args[0]));
        Bela parser = new Bela(fs);
        Prog arvore = parser.Bela();
        geraCodigo(arvore, args[0]);
    }

    public static void geraCodigo(Prog prog, String arquivo) {
        System.out.println("Geração de código para o programa: " + arquivo);
    }
}
PARSER_END(Bela)

SKIP :
{
    " " | "\t" | "\n" | "\r"
}

TOKEN :
{
    <MAIN: "main">
| <VAR: "var">
| <APAR: "(">
| <FPAR: ")">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTOVIRG: ";">
| <FLOAT: "float">
| <BOOL: "bool">
| <VOID: "void">
| <IGUAL: "=">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <LEITURA: "readInput">
| <RETORNO: "return">
| <IMPRESSAO: "printLn">
| <VERDADEIRO: "true">
| <FALSO: "false">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MENOR: "<">
| <MAIOR: ">">
| <DOISIGUAIS: "==">
| <VIRGULA: ",">
| <FUN: "fun">
}

TOKEN :
{
    <NUM: (["0"-"9"])+ ( "." (["0"-"9"])+ )? (["E","e"] ("+" | "-")? (["0"-"9"])+ )? >
| <ID: (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9"])* ( "_" (["a"-"z","A"-"Z","0"-"9"])+ )* >
}

Prog Bela() :
{
    Main m;
    ArrayList<Fun> funs = new ArrayList<>();
    Fun f;
}
{
    m = Main()
    (f = Func() { funs.add(f); })*
    <EOF>
    { return new Prog(m, funs); }
}

Main Main() :
{
    ArrayList<VarDecl> vars;
    ArrayList<Comando> coms;
}
{
    <MAIN> <APAR> <FPAR> <ACHAVES>
    vars = VarDecl()
    coms = SeqComandos()
    <FCHAVES>
    { return new Main(vars, coms); }
}

ArrayList<VarDecl> VarDecl() :
{
    ArrayList<VarDecl> vars = new ArrayList<>();
    Token t;
    Token id;
}
{
    ( <VAR> t = Tipo() id = TokenId() <PONTOVIRG> { vars.add(new VarDecl(t.image, id.image)); } )*
    { return vars; }
}

Token Tipo() :
{
    Token t = null;
}
{
    t = <FLOAT> { return t; }
| t = <BOOL> { return t; }
| t = <VOID> { return t; }
}

ArrayList<Comando> SeqComandos() :
{
    ArrayList<Comando> coms = new ArrayList<>();
    Comando c;
}
{
    (c = Comando() { coms.add(c); })*
    { return coms; }
}

Comando Comando() :
{
    Token id = null;
    Exp exp = null;
    ArrayList<Comando> bloco = null;
    Comando result = null;
}
{
    (
        id = TokenId()
        {
            result = ComandoAux(id);
        }
    | <IF> exp = Exp() <THEN> <ACHAVES> bloco = SeqComandos() <FCHAVES> <PONTOVIRG>
        { result = new CIf(exp, bloco); }
    | <WHILE> exp = Exp() <ACHAVES> bloco = SeqComandos() <FCHAVES> <PONTOVIRG>
        { result = new CWhile(exp, bloco); }
    | <RETORNO> exp = Exp() <PONTOVIRG>
        { result = new CReturn(exp); }
    | <IMPRESSAO> exp = Exp() <PONTOVIRG>
        { result = new CPrint(exp); }
    )
    { return result; }
}

Comando ComandoAux(Token id) :
{
    Exp exp = null;
    ArrayList<Exp> args = new ArrayList<>();
    Comando result = null;
}
{
    (
        <IGUAL> exp = ComandoAuxIgual()
        {
            if (exp instanceof EChamadaFun && ((EChamadaFun)exp).getFun().equals("readInput")) {
                result = new CReadInput(new EVar(id.image));
            } else {
                result = new CAtribuicao(new EVar(id.image), exp);
            }
        }
    | <APAR> (args = ListaExp())? <FPAR> <PONTOVIRG>
        { result = new CChamadaFun(new EVar(id.image), args); }
    )
    { return result; }
}

Exp ComandoAuxIgual() :
{
    Exp exp = null;
}
{
    <LEITURA> <APAR> <FPAR> <PONTOVIRG>
    { return new EChamadaFun("readInput", new ArrayList<Exp>()); }
| exp = Exp() <PONTOVIRG>
    { return exp; }
}

Exp Exp() :
{
    Exp exp1 = null, exp2 = null;
    Token op = null;
}
{
    <APAR> exp1 = Exp() op = Op() exp2 = Exp() <FPAR>
    { return new EOpExp(op.image, exp1, exp2); }
| exp1 = Fator()
    { return exp1; }
}

Exp Fator() :
{
    Token id = null;
    Token num = null;
    ArrayList<Exp> args = new ArrayList<>();
}
{
    id = TokenId()
    (
        <APAR> (args = ListaExp())? <FPAR>
        { return new EChamadaFun(id.image, args); }
    |
        { return new EVar(id.image); }
    )
| num = TokenNum()
    { return new EFloat(Float.parseFloat(num.image)); }
| <VERDADEIRO>
    { return new ETrue(); }
| <FALSO>
    { return new EFalse(); }
}

Token Op() :
{
    Token op = null;
}
{
    op = <SOMA> { return op; }
| op = <SUB> { return op; }
| op = <MULT> { return op; }
| op = <DIV> { return op; }
| op = <AND> { return op; }
| op = <OR> { return op; }
| op = <MENOR> { return op; }
| op = <MAIOR> { return op; }
| op = <DOISIGUAIS> { return op; }
}

ArrayList<Exp> ListaExp() :
{
    ArrayList<Exp> exps = new ArrayList<>();
    Exp exp;
}
{
    exp = Exp() { exps.add(exp); }
    ListaExpAux(exps)
    { return exps; }
}

void ListaExpAux(ArrayList<Exp> exps) :
{
    Exp exp;
}
{
    ( <VIRGULA> exp = Exp() { exps.add(exp); } ListaExpAux(exps) )?
}

Fun Func() :
{
    Token retType;
    Token funcName;
    ArrayList<ParamFormalFun> params;
    ArrayList<VarDecl> vars;
    ArrayList<Comando> body;
    Fun f;
}
{
    <FUN> retType = Tipo() funcName = TokenId() <APAR> (params = ListaArg())? <FPAR> <ACHAVES>
    vars = VarDecl()
    body = SeqComandos()
    <FCHAVES>
    { return new Fun(funcName.image, params, retType.image, vars, body); }
}

ArrayList<ParamFormalFun> ListaArg() :
{
    ArrayList<ParamFormalFun> params = new ArrayList<>();
    Token type;
    Token id;
}
{
    type = Tipo() id = TokenId() { params.add(new ParamFormalFun(id.image, type.image)); }
    ListaArgAux(params)
    { return params; }
}

void ListaArgAux(ArrayList<ParamFormalFun> params) :
{
    Token type;
    Token id;
}
{
    ( <VIRGULA> type = Tipo() id = TokenId() { params.add(new ParamFormalFun(id.image, type.image)); } ListaArgAux(params) )?
}

Token TokenId() :
{
    Token t;
}
{
    t = <ID> { return t; }
}

Token TokenNum() :
{
    Token t;
}
{
    t = <NUM> { return t; }
}
